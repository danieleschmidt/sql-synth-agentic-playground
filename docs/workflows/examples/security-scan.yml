# Comprehensive Security Scanning Workflow
# This workflow must be manually created at .github/workflows/security-scan.yml

name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - sast
          - dependency
          - container
          - secrets

env:
  PYTHON_VERSION: '3.11'

defaults:
  run:
    shell: bash

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Static Application Security Testing (SAST)
  sast-scan:
    name: SAST Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'sast' || github.event.inputs.scan_type == ''
    strategy:
      matrix:
        tool: [bandit, semgrep, codeql]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        if: matrix.tool != 'codeql'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        if: matrix.tool != 'codeql'
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Run Bandit security scan
        if: matrix.tool == 'bandit'
        run: |
          bandit -r src/ \
            -f json \
            -o bandit-results.json \
            -ll \
            --exclude '**/test_*.py,**/tests/'
          bandit -r src/ \
            -f sarif \
            -o bandit-results.sarif \
            -ll \
            --exclude '**/test_*.py,**/tests/' || true
            
      - name: Upload Bandit results to GitHub Security
        if: matrix.tool == 'bandit' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: bandit-results.sarif
          category: bandit
          
      - name: Run Semgrep security scan
        if: matrix.tool == 'semgrep'
        uses: returntocorp/semgrep-action@v1
        with:
          config: >
            p/security-audit
            p/secrets
            p/python
            p/django
            p/flask
            p/sql-injection
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
          
      - name: Initialize CodeQL
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: +security-and-quality
          
      - name: Autobuild for CodeQL
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/autobuild@v2
        
      - name: Perform CodeQL Analysis
        if: matrix.tool == 'codeql'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"
          
      - name: Upload SAST results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sast-results-${{ matrix.tool }}
          path: |
            *-results.json
            *-results.sarif
          retention-days: 30

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependency' || github.event.inputs.scan_type == ''
    strategy:
      matrix:
        tool: [safety, snyk, osv-scanner]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
      - name: Run Safety dependency scan
        if: matrix.tool == 'safety'
        run: |
          safety check \
            --json \
            --output safety-results.json \
            --continue-on-error
          safety check \
            --output safety-results.txt || true
            
      - name: Run Snyk vulnerability scan
        if: matrix.tool == 'snyk'
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json-file-output=snyk-results.json
          
      - name: Upload Snyk results to GitHub
        if: matrix.tool == 'snyk' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
          category: snyk
          
      - name: Run OSV-Scanner
        if: matrix.tool == 'osv-scanner'
        uses: google/osv-scanner/actions/scanner@v1
        with:
          scan-args: |
            --output=osv-results.json
            --format=json
            ./
          
      - name: Upload dependency scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-${{ matrix.tool }}
          path: |
            *-results.json
            *-results.txt
            *.sarif
          retention-days: 30

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'container' || github.event.inputs.scan_type == ''
    strategy:
      matrix:
        scanner: [trivy, grype, docker-scout]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image for scanning
        run: |
          docker build -t sql-synth-scan:latest .
          
      - name: Run Trivy vulnerability scanner
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sql-synth-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Run Trivy filesystem scan
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'
          
      - name: Upload Trivy results to GitHub Security
        if: matrix.scanner == 'trivy' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy
          
      - name: Run Grype vulnerability scanner
        if: matrix.scanner == 'grype'
        uses: anchore/scan-action@v3
        with:
          image: 'sql-synth-scan:latest'
          output-format: 'sarif'
          output-file: 'grype-results.sarif'
          
      - name: Upload Grype results to GitHub Security
        if: matrix.scanner == 'grype' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'grype-results.sarif'
          category: grype
          
      - name: Run Docker Scout scan
        if: matrix.scanner == 'docker-scout'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: 'sql-synth-scan:latest'
          format: sarif
          output: docker-scout-results.sarif
          
      - name: Upload Docker Scout results
        if: matrix.scanner == 'docker-scout' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'docker-scout-results.sarif'
          category: docker-scout
          
      - name: Upload container scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: container-scan-${{ matrix.scanner }}
          path: |
            *-results.sarif
            *-results.json
          retention-days: 30

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    strategy:
      matrix:
        tool: [gitleaks, truffhog]
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run Gitleaks secret scan
        if: matrix.tool == 'gitleaks'
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          args: --verbose --report-format sarif --report-path gitleaks-results.sarif
          
      - name: Upload Gitleaks results to GitHub Security
        if: matrix.tool == 'gitleaks' && always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gitleaks-results.sarif
          category: gitleaks
          
      - name: Run TruffleHog secret scan
        if: matrix.tool == 'truffhog'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --json --output trufflehog-results.json
          
      - name: Upload secret scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: secret-scan-${{ matrix.tool }}
          path: |
            *-results.sarif
            *-results.json
          retention-days: 30

  # Infrastructure as Code security scanning
  iac-scan:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'iac' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Checkov IaC scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,docker_compose,yaml,json
          output_format: sarif
          output_file_path: checkov-results.sarif
          
      - name: Upload Checkov results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif
          category: checkov
          
      - name: Upload IaC scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: iac-scan-results
          path: checkov-results.sarif
          retention-days: 30

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast-scan, dependency-scan, container-scan, secret-scan, iac-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all scan results
        uses: actions/download-artifact@v3
        with:
          path: scan-results
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Generate security report
        run: |
          python scripts/generate-security-report.py \
            --input-dir scan-results \
            --output security-report.html \
            --format html,json,pdf
            
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report-${{ github.sha }}
          path: |
            security-report.*
          retention-days: 90
          
      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
            
            const comment = `## 🔒 Security Scan Results
            
            **Total Vulnerabilities Found:** ${report.total_vulnerabilities}
            - **Critical:** ${report.critical || 0}
            - **High:** ${report.high || 0}
            - **Medium:** ${report.medium || 0}
            - **Low:** ${report.low || 0}
            
            **Scan Summary:**
            - SAST: ${report.sast_status || 'N/A'}
            - Dependencies: ${report.dependency_status || 'N/A'}
            - Container: ${report.container_status || 'N/A'}
            - Secrets: ${report.secrets_status || 'N/A'}
            - IaC: ${report.iac_status || 'N/A'}
            
            [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Security notification
  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && (needs.security-report.result == 'failure' || contains(needs.*.result, 'failure'))
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#security-alerts",
              "username": "SecurityBot",
              "icon_emoji": ":warning:",
              "attachments": [{
                "color": "danger",
                "fallback": "Security scan failed",
                "title": "🔒 Security Scan Alert",
                "text": "Security vulnerabilities detected in ${{ github.repository }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Commit",
                    "value": "${{ github.sha }}",
                    "short": true
                  },
                  {
                    "title": "Workflow",
                    "value": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Results>",
                    "short": true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true