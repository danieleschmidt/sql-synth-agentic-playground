name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0
      with:
        extra_args: --all-files

    - name: Lint with Ruff
      run: |
        ruff check . --output-format=github
        ruff check . --statistics

    - name: Format check with Black
      run: black --check --diff .

    - name: Import sorting check with isort
      run: isort --check-only --diff .

    - name: Type checking with MyPy
      run: mypy src/ --strict

    - name: Security scan with Bandit
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Dependency vulnerability scan
      run: |
        pip-audit --format=json --output=audit-report.json
        safety check --json --output=safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          audit-report.json
          safety-report.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run unit tests
      run: |
        pytest tests/ -m "unit or not integration and not benchmark" \
          --junitxml=junit-${{ matrix.python-version }}.xml \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --tb=short

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: junit-${{ matrix.python-version }}.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unit-tests-py${{ matrix.python-version }}
        name: codecov-py${{ matrix.python-version }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Wait for services
      run: |
        sleep 10
        pg_isready -h localhost -p 5432 -U test_user
        redis-cli -h localhost -p 6379 ping

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        pytest tests/ -m "integration" \
          --junitxml=junit-integration.xml \
          --cov=src \
          --cov-report=xml \
          --tb=short

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: junit-integration.xml

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run performance tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        pytest tests/performance/ -m "benchmark" \
          --benchmark-json=benchmark-results.json \
          --tb=short

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: benchmark-results.json

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: false
        tags: sql-synth-agentic-playground:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: development
        push: false
        tags: sql-synth-agentic-playground:dev-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.dev.yml config

    - name: Run container smoke test
      run: |
        docker run --rm -d --name test-container \
          -p 8501:8501 \
          sql-synth-agentic-playground:test
        
        # Wait for container to start
        sleep 30
        
        # Basic health check
        curl -f http://localhost:8501/_stcore/health || exit 1
        
        # Cleanup
        docker stop test-container

  # License and Documentation Checks
  docs-and-compliance:
    name: Documentation & Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for required files
      run: |
        test -f README.md || (echo "README.md missing" && exit 1)
        test -f LICENSE || (echo "LICENSE missing" && exit 1)
        test -f CHANGELOG.md || (echo "CHANGELOG.md missing" && exit 1)
        test -f pyproject.toml || (echo "pyproject.toml missing" && exit 1)

    - name: Validate YAML files
      run: |
        pip install yamllint
        yamllint .github/workflows/
        yamllint docker-compose*.yml

    - name: Check documentation links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check.json'

    - name: License compliance check
      run: |
        pip install licensecheck
        licensecheck --packageinfo
      continue-on-error: true

  # Merge Results
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, docker-build, docs-and-compliance]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Display test summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation | ${{ needs.docs-and-compliance.result }} |" >> $GITHUB_STEP_SUMMARY

    - name: Check overall status
      if: contains(needs.*.result, 'failure')
      run: |
        echo "❌ Some tests failed"
        exit 1

    - name: Success message
      if: ${{ !contains(needs.*.result, 'failure') }}
      run: echo "✅ All tests passed successfully!"