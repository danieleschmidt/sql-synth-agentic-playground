apiVersion: v1
kind: Namespace
metadata:
  name: sql-synth-agent
  labels:
    name: sql-synth-agent

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sql-synth-config
  namespace: sql-synth-agent
data:
  LOG_LEVEL: "INFO"
  LOG_JSON: "true"
  ENABLE_CACHING: "true"
  CACHE_TTL: "3600"
  MAX_CONNECTIONS: "20"
  HEALTH_CHECK_INTERVAL: "30"

---
apiVersion: v1
kind: Secret
metadata:
  name: sql-synth-secrets
  namespace: sql-synth-agent
type: Opaque
data:
  # Base64 encoded values - replace with actual secrets
  DATABASE_URL: cG9zdGdyZXNxbDovL3VzZXI6cGFzc0BkYi5leGFtcGxlLmNvbS9kYm5hbWU=
  OPENAI_API_KEY: c2stWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZ

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sql-synth-agent
  namespace: sql-synth-agent
  labels:
    app: sql-synth-agent
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sql-synth-agent
  template:
    metadata:
      labels:
        app: sql-synth-agent
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: sql-synth-agent
        image: sql-synth-agent:latest
        ports:
        - containerPort: 8501
          protocol: TCP
        envFrom:
        - configMapRef:
            name: sql-synth-config
        - secretRef:
            name: sql-synth-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8501
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health?ready
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 2
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: data
          mountPath: /app/data
        - name: cache
          mountPath: /app/cache
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: data
        persistentVolumeClaim:
          claimName: sql-synth-data
      - name: cache
        emptyDir:
          sizeLimit: 2Gi
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 6000
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 6000

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sql-synth-data
  namespace: sql-synth-agent
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: sql-synth-service
  namespace: sql-synth-agent
  labels:
    app: sql-synth-agent
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8501
    protocol: TCP
    name: http
  selector:
    app: sql-synth-agent

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sql-synth-ingress
  namespace: sql-synth-agent
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - sql-synth.yourdomain.com
    secretName: sql-synth-tls
  rules:
  - host: sql-synth.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sql-synth-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sql-synth-hpa
  namespace: sql-synth-agent
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sql-synth-agent
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sql-synth-pdb
  namespace: sql-synth-agent
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sql-synth-agent

---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: sql-synth-metrics
  namespace: sql-synth-agent
  labels:
    app: sql-synth-agent
spec:
  selector:
    matchLabels:
      app: sql-synth-agent
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s