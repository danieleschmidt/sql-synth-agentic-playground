# Production Kubernetes Deployment for SQL Synthesis Agent
apiVersion: v1
kind: Namespace
metadata:
  name: sql-synth-prod
  labels:
    app: sql-synth-agentic-playground
    environment: production
    
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sql-synth-config
  namespace: sql-synth-prod
data:
  production_config.yaml: |
    # This would contain the production configuration
    # In practice, this would reference the production_config.yaml file
    app:
      name: "sql-synth-agentic-playground"
      environment: "production"
      log_level: "INFO"
    
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: sql-synth-secrets
  namespace: sql-synth-prod
type: Opaque
data:
  # Base64 encoded secrets (these should be managed by a secret manager)
  database-url: ""  # Base64 encoded DATABASE_URL
  openai-api-key: ""  # Base64 encoded OPENAI_API_KEY
  jwt-secret: ""  # Base64 encoded JWT_SECRET
  encryption-key: ""  # Base64 encoded ENCRYPTION_KEY
  redis-password: ""  # Base64 encoded REDIS_PASSWORD
  
---
# Deployment for the main application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sql-synth-app
  namespace: sql-synth-prod
  labels:
    app: sql-synth-agentic-playground
    component: web-app
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: sql-synth-agentic-playground
      component: web-app
  template:
    metadata:
      labels:
        app: sql-synth-agentic-playground
        component: web-app
        version: "v1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sql-synth-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: sql-synth-app
        image: sql-synth-agentic-playground:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8501
          name: streamlit
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: sql-synth-secrets
              key: database-url
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: sql-synth-secrets
              key: openai-api-key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: sql-synth-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: sql-synth-secrets
              key: encryption-key
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sql-synth-secrets
              key: redis-password
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: temp-storage
          mountPath: /tmp
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8501
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8501
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: config-volume
        configMap:
          name: sql-synth-config
      - name: temp-storage
        emptyDir:
          sizeLimit: "1Gi"
      
---
# Service Account for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sql-synth-service-account
  namespace: sql-synth-prod
  labels:
    app: sql-synth-agentic-playground
    
---
# ClusterRole for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sql-synth-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
  
---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sql-synth-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sql-synth-cluster-role
subjects:
- kind: ServiceAccount
  name: sql-synth-service-account
  namespace: sql-synth-prod
  
---
# Service for the application
apiVersion: v1
kind: Service
metadata:
  name: sql-synth-service
  namespace: sql-synth-prod
  labels:
    app: sql-synth-agentic-playground
    component: web-app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: sql-synth-agentic-playground
    component: web-app
  ports:
  - name: streamlit
    port: 80
    targetPort: 8501
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300
      
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sql-synth-hpa
  namespace: sql-synth-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sql-synth-app
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
      
---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sql-synth-pdb
  namespace: sql-synth-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sql-synth-agentic-playground
      component: web-app
      
---
# Redis Deployment for caching
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: sql-synth-prod
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      component: cache
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        args:
        - "redis-server"
        - "--requirepass"
        - "$(REDIS_PASSWORD)"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sql-synth-secrets
              key: redis-password
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
          
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: sql-synth-prod
  labels:
    app: redis
    component: cache
spec:
  selector:
    app: redis
    component: cache
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  type: ClusterIP
  
---
# Persistent Volume Claim for Redis
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: sql-synth-prod
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3
  
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sql-synth-network-policy
  namespace: sql-synth-prod
spec:
  podSelector:
    matchLabels:
      app: sql-synth-agentic-playground
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8501
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53
      
---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: sql-synth-metrics
  namespace: sql-synth-prod
  labels:
    app: sql-synth-agentic-playground
    component: web-app
spec:
  selector:
    matchLabels:
      app: sql-synth-agentic-playground
      component: web-app
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s